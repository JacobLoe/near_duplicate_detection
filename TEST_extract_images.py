import os
import cv2
import argparse
from tqdm import tqdm
import xml.etree.ElementTree as ET
import glob
import shutil
import numpy as np
import time
#################################################################


def read_shotdetect_xml(path):
    tree = ET.parse(path)
    root = tree.getroot().findall('content')
    timestamps = []
    for child in root[0].iter():
        if child.tag == 'shot':
            items = child.items()
            timestamps.append((int(items[4][1]), int(items[4][1])+int(items[2][1])-1))  # ms
    return timestamps  # in ms
#############################################################################################
# read video file frame by frame, beginning and ending with a timestamp


def save_shot_frames(video_path, frame_path, timestamps):
    frame_size = (299, 299)
    vid = cv2.VideoCapture(video_path)

    for i in range(np.max(timestamps)):
        b = vid.grab()
        if i in timestamps:
            f = vid.retrieve(b)
            frame = cv2.resize(frame, frame_size)
            name = os.path.join(frame_path, (str(start_ms+i)+'.png'))
            cv2.imwrite(name, frame)
#########################################################################################################


def main(videos_path,features_path):
    print('begin iterating through videos')

    list_videos_path = glob.glob(os.path.join(videos_path, '**/*.mp4'), recursive=True)  # get the list of videos in videos_dir

    cp = os.path.commonprefix(list_videos_path)  # get the common dir between paths found with glob

    list_features_path = [os.path.join(
                         os.path.join(features_path,
                         os.path.relpath(p, cp))[:-4])  # add a new dir 'VIDEO_FILE_NAME/shot_detection' to the path
                         for p in list_videos_path]  # create a list of paths where all the data (shotdetection,frames,features) are saved to

    aa = time.time()
    for v_path, f_path in tqdm(zip(list_videos_path, list_features_path), total=len(list_videos_path)):

        # get the shot timestamps generated by shotdetect

        shot_timestamps = read_shotdetect_xml(os.path.join(f_path, 'shot_detection/result.xml'))
        shot_timestamps = [ts[0] for ts in shot_timestamps]

        if os.path.isdir(os.path.join(f_path, 'frames')):  # remove the old directory
            shutil.rmtree(os.path.join(f_path, 'frames'))

        print(shot_timestamps)
        save_shot_frames(v_path, f_path, shot_timestamps)
#        break
#    bb = time.time()
#    print(bb-aa)
#########################################################################################################


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("videos_dir", help="the directory where the video-files are stored")
    parser.add_argument("features_dir", help="the directory where the images are to be stored")
    args = parser.parse_args()

    main(args.videos_dir, args.features_dir)
